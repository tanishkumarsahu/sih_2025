'use client';

import React, { useState } from 'react';
import {
  Box,
  Container,
  VStack,
  HStack,
  Heading,
  Text,
  Button,
  Badge,
  useBreakpointValue,
} from '@chakra-ui/react';
import { motion } from 'framer-motion';
import FieldOfStudySelector from '../forms/FieldOfStudySelector';

const MotionBox = motion.create(Box);

export const FieldOfStudyDemo: React.FC = () => {
  const [selectedField, setSelectedField] = useState<string>('');
  const [language, setLanguage] = useState<'en' | 'hi'>('en');
  const [error, setError] = useState<string>('');

  const handleFieldChange = (value: string) => {
    setSelectedField(value);
    setError(''); // Clear error when field is selected
  };

  const handleValidate = () => {
    if (!selectedField.trim()) {
      setError(language === 'en' ? 'Please select a field of study' : '‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§ß‡•ç‡§Ø‡§Ø‡§® ‡§ï‡§æ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§ö‡•Å‡§®‡•á‡§Ç');
    } else {
      setError('');
      alert(`Selected: ${selectedField}`);
    }
  };

  const containerMaxW = useBreakpointValue({ base: 'full', md: '2xl' });

  return (
    <Container maxW={containerMaxW} py={8} px={4}>
      <MotionBox
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        {/* Header */}
        <VStack gap={6} mb={8}>
          <Heading
            size={{ base: 'lg', md: 'xl' }}
            textAlign="center"
            color="gray.800"
          >
            {language === 'en' 
              ? 'Mobile-Friendly Field of Study Selector' 
              : '‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤-‡§´‡•ç‡§∞‡•á‡§Ç‡§°‡§≤‡•Ä ‡§Ö‡§ß‡•ç‡§Ø‡§Ø‡§® ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§ö‡§Ø‡§®‡§ï‡§∞‡•ç‡§§‡§æ'
            }
          </Heading>
          
          <Text
            fontSize={{ base: 'md', md: 'lg' }}
            textAlign="center"
            color="gray.600"
            maxW="2xl"
          >
            {language === 'en'
              ? 'Designed for first-generation learners with limited digital exposure. Choose from categorized options instead of overwhelming 35+ choices.'
              : '‡§∏‡•Ä‡§Æ‡§ø‡§§ ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§è‡§ï‡•ç‡§∏‡§™‡•ã‡§ú‡§º‡§∞ ‡§µ‡§æ‡§≤‡•á ‡§™‡§π‡§≤‡•Ä ‡§™‡•Ä‡§¢‡§º‡•Ä ‡§ï‡•á ‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ‡§∞‡•ç‡§•‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§® ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§ 35+ ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™‡•ã‡§Ç ‡§ï‡•á ‡§¨‡§ú‡§æ‡§Ø ‡§µ‡§∞‡•ç‡§ó‡•Ä‡§ï‡•É‡§§ ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§∏‡•á ‡§ö‡•Å‡§®‡•á‡§Ç‡•§'
            }
          </Text>

          {/* Language Toggle */}
          <HStack gap={4}>
            <Button
              variant={language === 'en' ? 'solid' : 'outline'}
              colorScheme="brand"
              onClick={() => setLanguage('en')}
              size="sm"
            >
              English
            </Button>
            <Button
              variant={language === 'hi' ? 'solid' : 'outline'}
              colorScheme="brand"
              onClick={() => setLanguage('hi')}
              size="sm"
            >
              ‡§π‡§ø‡§Ç‡§¶‡•Ä
            </Button>
          </HStack>
        </VStack>

        {/* Field Selector */}
        <Box mb={8}>
          <FieldOfStudySelector
            value={selectedField}
            onChange={handleFieldChange}
            language={language}
            error={error}
            isRequired={true}
          />
        </Box>

        {/* Selected Field Display */}
        {selectedField && (
          <MotionBox
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.3 }}
            mb={6}
          >
            <Box
              p={6}
              bg="green.50"
              borderRadius="xl"
              border="2px solid"
              borderColor="green.200"
            >
              <HStack gap={3} justify="space-between" align="center">
                <Box>
                  <Text fontSize="sm" color="green.700" fontWeight="medium">
                    {language === 'en' ? 'Selected Field:' : '‡§ö‡§Ø‡§®‡§ø‡§§ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞:'}
                  </Text>
                  <Text fontSize="lg" fontWeight="bold" color="green.800">
                    {selectedField}
                  </Text>
                </Box>
                <Badge colorScheme="green" size="lg">
                  ‚úì {language === 'en' ? 'Selected' : '‡§ö‡§Ø‡§®‡§ø‡§§'}
                </Badge>
              </HStack>
            </Box>
          </MotionBox>
        )}

        {/* Action Buttons */}
        <HStack gap={4} justify="center">
          <Button
            colorScheme="brand"
            size="lg"
            onClick={handleValidate}
            px={8}
          >
            {language === 'en' ? 'Validate Selection' : '‡§ö‡§Ø‡§® ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç'}
          </Button>
          
          <Button
            variant="outline"
            size="lg"
            onClick={() => {
              setSelectedField('');
              setError('');
            }}
            px={8}
          >
            {language === 'en' ? 'Clear Selection' : '‡§ö‡§Ø‡§® ‡§∏‡§æ‡§´‡§º ‡§ï‡§∞‡•á‡§Ç'}
          </Button>
        </HStack>

        {/* Features List */}
        <Box mt={12} p={6} bg="gray.50" borderRadius="xl">
          <Heading size="md" mb={4} color="gray.800">
            {language === 'en' ? 'Key Features:' : '‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§µ‡§ø‡§∂‡•á‡§∑‡§§‡§æ‡§è‡§Ç:'}
          </Heading>
          
          <VStack align="start" gap={3}>
            {[
              {
                en: 'üì± Mobile-first design with large touch targets',
                hi: 'üì± ‡§¨‡§°‡§º‡•á ‡§ü‡§ö ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤-‡§´‡§∞‡•ç‡§∏‡•ç‡§ü ‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§®'
              },
              {
                en: 'üéØ 6 main categories instead of 35+ overwhelming options',
                hi: 'üéØ 35+ ‡§≠‡§æ‡§∞‡•Ä ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™‡•ã‡§Ç ‡§ï‡•á ‡§¨‡§ú‡§æ‡§Ø 6 ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∂‡•ç‡§∞‡•á‡§£‡§ø‡§Ø‡§æ‡§Ç'
              },
              {
                en: 'üîç Search functionality for large categories',
                hi: 'üîç ‡§¨‡§°‡§º‡•Ä ‡§∂‡•ç‡§∞‡•á‡§£‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ñ‡•ã‡§ú ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡•ç‡§∑‡§Æ‡§§‡§æ'
              },
              {
                en: '‚ú® Smooth animations and visual feedback',
                hi: '‚ú® ‡§∏‡•ç‡§Æ‡•Ç‡§• ‡§è‡§®‡•Ä‡§Æ‡•á‡§∂‡§® ‡§î‡§∞ ‡§µ‡§ø‡§ú‡§º‡•Å‡§Ö‡§≤ ‡§´‡•Ä‡§°‡§¨‡•à‡§ï'
              },
              {
                en: 'üåê Full bilingual support (English/Hindi)',
                hi: 'üåê ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§¶‡•ç‡§µ‡§ø‡§≠‡§æ‡§∑‡•Ä ‡§∏‡§Æ‡§∞‡•ç‡§•‡§® (‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä/‡§π‡§ø‡§Ç‡§¶‡•Ä)'
              },
              {
                en: '‚ôø Accessibility compliant for government standards',
                hi: '‚ôø ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Æ‡§æ‡§®‡§ï‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡§π‡•Å‡§Ç‡§ö ‡§Ö‡§®‡•Å‡§™‡§æ‡§≤‡§®'
              }
            ].map((feature, index) => (
              <Text key={index} color="gray.700" fontSize="md">
                {feature[language]}
              </Text>
            ))}
          </VStack>
        </Box>
      </MotionBox>
    </Container>
  );
};

export default FieldOfStudyDemo;
